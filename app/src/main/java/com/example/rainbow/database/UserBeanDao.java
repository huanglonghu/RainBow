package com.example.rainbow.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.rainbow.database.entity.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NickName = new Property(0, String.class, "nickName", false, "NICK_NAME");
        public final static Property Id = new Property(1, long.class, "id", true, "_id");
        public final static Property UserType = new Property(2, int.class, "userType", false, "USER_TYPE");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property ShopId = new Property(4, int.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(5, String.class, "shopName", false, "SHOP_NAME");
        public final static Property Token = new Property(6, String.class, "token", false, "TOKEN");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"NICK_NAME\" TEXT," + // 0: nickName
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: id
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 2: userType
                "\"MOBILE\" TEXT," + // 3: mobile
                "\"SHOP_ID\" INTEGER NOT NULL ," + // 4: shopId
                "\"SHOP_NAME\" TEXT," + // 5: shopName
                "\"TOKEN\" TEXT);"); // 6: token
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(1, nickName);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getUserType());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
        stmt.bindLong(5, entity.getShopId());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(1, nickName);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getUserType());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
        stmt.bindLong(5, entity.getShopId());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nickName
            cursor.getLong(offset + 1), // id
            cursor.getInt(offset + 2), // userType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.getInt(offset + 4), // shopId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shopName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // token
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setNickName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setUserType(cursor.getInt(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShopId(cursor.getInt(offset + 4));
        entity.setShopName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
